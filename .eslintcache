[{"C:\\Users\\q\\week3\\list-app\\src\\index.js":"1","C:\\Users\\q\\week3\\list-app\\src\\App.js":"2","C:\\Users\\q\\week3\\list-app\\src\\components\\JobBoardComponent.js":"3","C:\\Users\\q\\week3\\gongu\\src\\index.js":"4","C:\\Users\\q\\week3\\gongu\\src\\App.js":"5","C:\\Users\\q\\week3\\gongu\\src\\components\\JobBoardComponent.js":"6"},{"size":220,"mtime":1610598639916,"results":"7","hashOfConfig":"8"},{"size":2098,"mtime":1610624153097,"results":"9","hashOfConfig":"8"},{"size":2558,"mtime":1610624371962,"results":"10","hashOfConfig":"8"},{"size":232,"mtime":1610711611817,"results":"11","hashOfConfig":"12"},{"size":2111,"mtime":1610711611807,"results":"13","hashOfConfig":"12"},{"size":2431,"mtime":1610697253632,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ory3kv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tof3e",{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\q\\week3\\list-app\\src\\index.js",[],"C:\\Users\\q\\week3\\list-app\\src\\App.js",["29"],"C:\\Users\\q\\week3\\list-app\\src\\components\\JobBoardComponent.js",[],"C:\\Users\\q\\week3\\gongu\\src\\index.js",[],"C:\\Users\\q\\week3\\gongu\\src\\App.js",["30","31","32","33"],"import React, {useState, useEffect } from 'react';\r\nimport data from './assets/data.json';\r\nimport JobBoardComponent from './components/JobBoardComponent';\r\n\r\nfunction App() {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filters, setFilters] = useState([]);\r\n  \r\n  useEffect(() => setJobs(data), []);\r\n\r\n  const filterFunc = ({category}) => {\r\n    if(filters.length===0){\r\n      return true;\r\n    }\r\n\r\n    const tags = [];\r\n\r\n    if(category){\r\n        tags.push(...category);\r\n    }\r\n\r\n    // return tags.some(tag => filters.includes(tag));\r\n    return filters.every(filter => tags.includes(filter));\r\n  }\r\n\r\n  const handletagClick = (tag) => {\r\n    // avoid re-adding tag\r\n    if(filters.includes(tag)) return;\r\n\r\n    setFilters([...filters, tag]);\r\n  }\r\n\r\n  const handleFilterClick = (passedFilter) => {\r\n    setFilters(filters.filter(f => f !== passedFilter));\r\n  }\r\n\r\n  const clearFilters= () => {\r\n    setFilters([]);\r\n  }\r\n  \r\n  const filteredJobs = jobs.filter(filterFunc);\r\n\r\n  return (\r\n    <>\r\n     <header className=\"bg-teal-500 mb-12\">\r\n       <img src=\"/images/bg-header-desktop.svg\" alt=\"bg-image\" />\r\n       console.log(\"adafdsf\");\r\n     </header>\r\n\r\n     <div className=\"container\">\r\n\r\n      {filters.length > 0 && (\r\n      <div className={`flex bg-white shdow-md -my-16 mb-20 mx-10 p-6 rounded z-10 relative`}>\r\n        {filters.map((filter) => (\r\n        <span className=\"cursor-pointer mr-4 mb-4 rounded font-bold text-teal-500 bg-teal-100 p-2 sm:mb-0\"\r\n          onClick={() => handleFilterClick(filter)}>\r\n            <span\r\n            className=''>x {filter}\r\n            </span>\r\n        </span>\r\n        ))}\r\n        <button onClick={clearFilters} className=\"font-bold text-gray-700 ml-auto\">Clear</button>\r\n      </div>\r\n    )}\r\n\r\n     {\r\n       jobs.length === 0 ? (\r\n         <p>Jobs are fetching...</p>\r\n       ) : (\r\n         filteredJobs.map(job => (\r\n          <JobBoardComponent\r\n          job={job} \r\n          key={job.id} \r\n          handletagClick={handletagClick}/>         \r\n         ))\r\n       )\r\n     }     \r\n     </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\q\\week3\\gongu\\src\\components\\JobBoardComponent.js",[],["34","35"],{"ruleId":"36","severity":1,"message":"37","line":50,"column":8,"nodeType":"38","endLine":50,"endColumn":66},{"ruleId":"39","severity":1,"message":"40","line":4,"column":21,"nodeType":"41","messageId":"42","endLine":4,"endColumn":27},{"ruleId":"39","severity":1,"message":"43","line":4,"column":29,"nodeType":"41","messageId":"42","endLine":4,"endColumn":40},{"ruleId":"39","severity":1,"message":"44","line":4,"column":42,"nodeType":"41","messageId":"42","endLine":4,"endColumn":52},{"ruleId":"36","severity":1,"message":"37","line":62,"column":8,"nodeType":"38","endLine":62,"endColumn":66},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'lightColors' is defined but never used.","'darkColors' is defined but never used.","no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-global-assign","no-unsafe-negation"]