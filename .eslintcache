[{"C:\\Users\\q\\week3\\list-app\\src\\index.js":"1","C:\\Users\\q\\week3\\list-app\\src\\App.js":"2","C:\\Users\\q\\week3\\list-app\\src\\components\\JobBoardComponent.js":"3","C:\\Users\\q\\week3\\gongu\\src\\index.js":"4","C:\\Users\\q\\week3\\gongu\\src\\App.js":"5","C:\\Users\\q\\week3\\gongu\\src\\components\\JobBoardComponent.js":"6"},{"size":220,"mtime":1610598639916,"results":"7","hashOfConfig":"8"},{"size":2098,"mtime":1610624153097,"results":"9","hashOfConfig":"8"},{"size":2558,"mtime":1610624371962,"results":"10","hashOfConfig":"8"},{"size":220,"mtime":1610697260677,"results":"11","hashOfConfig":"12"},{"size":2028,"mtime":1610697833993,"results":"13","hashOfConfig":"12"},{"size":2431,"mtime":1610697253632,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ory3kv",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1xp2fo7",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\Users\\q\\week3\\list-app\\src\\index.js",[],"C:\\Users\\q\\week3\\list-app\\src\\App.js",["30"],"C:\\Users\\q\\week3\\list-app\\src\\components\\JobBoardComponent.js",[],"C:\\Users\\q\\week3\\gongu\\src\\index.js",[],["31","32"],"C:\\Users\\q\\week3\\gongu\\src\\App.js",["33"],"import React, {useState, useEffect } from 'react';\nimport data from './assets/data.json';\nimport JobBoardComponent from './components/JobBoardComponent';\n\nfunction App() {\n  const [jobs, setJobs] = useState([]);\n  const [filters, setFilters] = useState([]);\n  \n  useEffect(() => setJobs(data), []);\n\n  const filterFunc = ({category}) => {\n    if(filters.length===0){\n      return true;\n    }\n\n    const tags = [];\n\n    if(category){\n        tags.push(...category);\n    }\n\n    // return tags.some(tag => filters.includes(tag));\n    return filters.every(filter => tags.includes(filter));\n  }\n\n  const handletagClick = (tag) => {\n    // avoid re-adding tag\n    if(filters.includes(tag)) return;\n\n    setFilters([...filters, tag]);\n  }\n\n  const handleFilterClick = (passedFilter) => {\n    setFilters(filters.filter(f => f !== passedFilter));\n  }\n\n  const clearFilters= () => {\n    setFilters([]);\n  }\n  \n  const filteredJobs = jobs.filter(filterFunc);\n\n  return (\n    <>\n     <header className=\"bg-teal-500 mb-12\">\n       <img src=\"/images/bg-header-desktop.svg\" alt=\"bg-image\" />\n       console.log(\"adafdsf\");\n     </header>\n\n     <div className=\"container\">\n\n      {filters.length > 0 && (\n      <div className={`flex bg-white shdow-md -my-16 mb-20 mx-10 p-6 rounded z-10 relative`}>\n        {filters.map((filter) => (\n        <span className=\"cursor-pointer mr-4 mb-4 rounded font-bold text-teal-500 bg-teal-100 p-2 sm:mb-0\"\n          onClick={() => handleFilterClick(filter)}>\n            <span\n            className=''>x {filter}\n            </span>\n        </span>\n        ))}\n        <button onClick={clearFilters} className=\"font-bold text-gray-700 ml-auto\">Clear</button>\n      </div>\n    )}\n\n     {\n       jobs.length === 0 ? (\n         <p>Jobs are fetching...</p>\n       ) : (\n         filteredJobs.map(job => (\n          <JobBoardComponent\n          job={job} \n          key={job.id} \n          handletagClick={handletagClick}/>         \n         ))\n       )\n     }     \n     </div>\n    </>\n  );\n}\n\nexport default App;\n","C:\\Users\\q\\week3\\gongu\\src\\components\\JobBoardComponent.js",[],["34","35"],{"ruleId":"36","severity":1,"message":"37","line":50,"column":8,"nodeType":"38","endLine":50,"endColumn":66},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"36","severity":1,"message":"37","line":46,"column":8,"nodeType":"38","endLine":46,"endColumn":66},{"ruleId":"39","replacedBy":"43"},{"ruleId":"41","replacedBy":"44"},"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-native-reassign",["45"],"no-negated-in-lhs",["46"],["45"],["46"],"no-global-assign","no-unsafe-negation"]